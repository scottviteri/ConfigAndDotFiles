(define-module (list-ops)
  #:export (my-length
            my-reverse
            my-map
            my-filter
            my-fold
            my-append
            my-concatenate
            ))

(use-modules (srfi srfi-1))

(define (my-reverse lst)
  (define (loop l1 l2)
    (if (nil? l1)
        l2
        (loop (cdr l1)
              (cons (car l1) l2))))
  (loop lst '())
)

(define (my-fold op init lst)
  (define (loop acc l1)
    (if (nil? l1)
        acc
        (loop (op (car l1) acc)
              (cdr l1))))
  (loop init lst)
  )

(define (compose f . rest)
  (my-fold (lambda (h g)
             (lambda (x) (g (h x))))
           f
           rest))

(define (inc x) (+ x 1))

(define (my-length lst)
  (my-fold (lambda (x acc) (inc acc)) 0 lst)
)

(define (my-map f lst)
  (define (loop acc l1)
    (if (nil? l1)
        (my-reverse acc)
        (loop  (cons (f (car l1)) acc)
               (cdr l1))))
  (loop '() lst)
)

(define (my-filter test lst)
  (define (loop l1 acc)
    (if (nil? l1)
        acc
        (let ((h1 (car l1)))
          (loop (cdr l1)
                (if (test h1) (cons h1 acc) acc)))))
  (my-reverse  (loop lst '()))
)

(define (my-append l1 l2)
  (define (loop l1' l2')
    (if (nil? l1')
        l2'
        (loop (cdr l1')
              (cons (car l1') l2'))))
  (loop (my-reverse l1) l2)
)

(define (flip f)
  (lambda (x y) (f y x)))

(define (my-concatenate lst-of-lsts)
  (my-fold (flip my-append) '() lst-of-lsts))
