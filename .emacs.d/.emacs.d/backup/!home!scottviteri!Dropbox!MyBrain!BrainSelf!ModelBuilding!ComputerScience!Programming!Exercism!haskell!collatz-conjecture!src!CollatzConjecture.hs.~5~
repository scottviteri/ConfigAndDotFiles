module CollatzConjecture (collatz) where

import qualified Data.List (elemIndex)
import qualified Control.Monad as M (liftM3)
import qualified Data.Bool as B (bool)

collatz :: Integer -> Maybe Integer
collatz start
    | start <= 0 = Nothing
    | start == 1 = Just 0
    | otherwise = toInteger <$> Data.List.elemIndex 1 collatzSequence
    where genNextCollatz = M.liftM3 B.bool ((+1).(*3)) (`quot` 2) even
          collatzSequence = iterate genNextCollatz start
