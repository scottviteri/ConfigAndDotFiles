#+begin_src haskell
:set +m
let doubleSmallNumber4 x = if x > 0
                            then x
                             else x*2
doubleSmallNumber4 42
#+end_src

#+RESULTS:
: Prelude| Prelude| Prelude> 42

#+NAME: factorial
#+BEGIN_SRC haskell :exports both
:set +m
let fact :: Int -> Int
    fact 0 = 1;
    fact n = n * fac (n - 1)

fact 4
#+END_SRC

#+RESULTS: factorial
: 24

#+BEGIN_SRC haskell :exports both
data T = A | B | C deriving (Eq, Ord, Show, Enum)
[A ..]
#+END_SRC

#+RESULTS:
| A | B | C |

#+NAME sign
#+BEGIN_SRC haskell
let sign :: Float -> Int
    sign x | x > 0  = 1
           | x == 0 = 0
           | x < 0  = -1

sign 3.2
#+END_SRC

#+RESULTS:
: Prelude| Prelude| Prelude| Prelude| Prelude> 1

#+BEGIN_SRC haskell :var a=1 b=2

  let y   = a * b
      f x = (x + y)/y
  in f a + f b
#+END_SRC

#+RESULTS:
: Prelude| Prelude| 3.5

#+BEGIN_SRC haskell
do { putStrLn "Hello"; putStrLn "World" }
#+END_SRC

#+RESULTS:
: Hello
: World
