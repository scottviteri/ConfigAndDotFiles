/-
These exercises are from the end of Chapter 2 of Theorem Proving in Lean.

Follow the instructions, in particular replacing the "sorry"s with your own expressions.
Leave the results in your assignment1 folder in CoCalc. We will harvest them when they are due.
-/

/-
Exercise 1 (2.10.1).

Define the function Do_Twice, as described in Section 2.4.
-/

def double (x : ℕ) : ℕ := x + x

def square (x : ℕ) := x * x

def do_twice (f : ℕ → ℕ) (x : ℕ) : ℕ := f (f x)

def Do_Twice (F : (ℕ → ℕ) → (ℕ → ℕ)) (f : ℕ → ℕ) : ℕ → ℕ :=
F (F f)

#check Do_Twice

-- Try it out. Can you predict the answer without looking?

#reduce Do_Twice do_twice double 2


/- 
Exercise 2 (2.10.2).

Define the functions curry and uncurry, as described in Section 2.4.
-/

def curry {α β γ : Type} (f : α × β → γ) : α → β → γ :=
λ a b, f (a, b)

def uncurry {α β γ : Type} (f : α → β → γ) : α × β → γ :=
λ p, f p.fst p.snd

-- Try it out

section
  variables {α β γ : Type}
  variable f : α × β → γ
  variable g : α → β → γ

  #reduce uncurry (curry f)
  #reduce curry (uncurry g)
end


/-
Exercise 3 (2.10.3).

Declare a constant vec_add that could represent a function that adds two vectors of natural
numbers of the same length, and a constant vec_reverse that can represent a function that
reverses its argument. Use implicit arguments for parameters that can be inferred.

Declare some variables and check some expressions involving the constants that you have declared.
-/

universe u
constant vec : Type u → ℕ → Type u

constant vec_add : Π {n : ℕ}, vec ℕ n → vec ℕ n → vec ℕ n
constant vec_reverse: Π {n : ℕ}, vec ℕ n → vec ℕ n

section

variable n : ℕ
variables x y : vec ℕ n

-- #check some expressions with vec_add and vec_reverse

#check vec_add x y
#check vec_add (vec_add x y) y
#check vec_reverse (vec_add x y)
#check vec_add x (vec_reverse x)

end


/- 
Exercise 4 (2.10.4).

Similarly, declare a constant matrix so that matrix α m n could represent the type of m by n
matrices. Declare some constants to represent functions on this type, such as matrix addition
and multiplication, and (using vec) multiplication of a matrix by a vector.

Once again, declare some variables and check some expressions involving the constants that you
have declared.
-/

-- Although we did not specify it, let's assume they are matrices of natural numbers

constant matrix : Π (α : Type u) (m n : ℕ), Type u

