
module Main where

main :: IO()
main = putStrLn ""

module Attempt1 where

main = putStrLn ""
data Expr = Constant Double
            | BinaryPlus Expr Expr

stringify :: Expr -> String
stringify (Constant c) = show c
stringify (BinaryPlus e1 e2) = stringify e1 ++ " + " ++ stringify e2

evaluate :: Expr -> Double
evaluate (Constant c) = c
evaluate (BinaryPlus e1 e2) = evaluate e1 + evaluate e2

{-
If I were to add BinaryMul, I would have to duplicate all of the above code
What I want to be able to do is just write

Expr = Expr | BinaryMul Expr Expr
stringify (BinaryMul e1 e2) = stringify e1 ++ " * " ++ stringify e2
evaluate (BinaryMul e1 e2) = evalute e1 * evalute e2
-}

data Constant = Constant Double deriving (Show)
