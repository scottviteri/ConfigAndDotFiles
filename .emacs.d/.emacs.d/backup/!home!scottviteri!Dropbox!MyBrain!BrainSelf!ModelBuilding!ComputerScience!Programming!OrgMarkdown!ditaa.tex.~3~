% Created 2019-05-24 Fri 17:38
% Intended LaTeX compiler: pdflatex
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\author{Scott Viteri}
\date{\today}
\title{}
\hypersetup{
 pdfauthor={Scott Viteri},
 pdftitle={},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 26.2 (Org mode 9.1.9)},
 pdflang={English}}
\begin{document}

\tableofcontents

Circularity in logic is wrong, but circularity in programming is fine.
Here is a non-terminating scheme program with exact self-reference.

\begin{verbatim}
(define (f) (f))
\end{verbatim}

The f function references the f function, and nothing else:
\begin{center}
\includegraphics[width=.9\linewidth]{images/full-self-reference.png}
\end{center}

Recursive procedures that terminate can do so because the circularity is only partial.
The factorial function, for example, calls factorial with a different argument --
 factorial only seems circular when we abstract away its input.

\begin{verbatim}
(define (fact' n accum)
  (if (= n 0)
      accum
      (fact' (- n 1) (* n accum))))

\end{verbatim}

\begin{center}
\includegraphics[width=.9\linewidth]{images/partial-self-reference.png}
\end{center}

Then we can abstract and cover up the self-reference as implementation details.
I think this is analogous to finding a cycle motif and modding out by it.

\begin{verbatim}
(define (fact n)
    (fact' n 1))

(display (fact 4))
\end{verbatim}


\begin{center}
\includegraphics[width=.9\linewidth]{images/abstract-over-self-reference.png}
\end{center}

So this all makes me question why we are not getting dependency cycles in the original deduplified DAG.
\end{document}