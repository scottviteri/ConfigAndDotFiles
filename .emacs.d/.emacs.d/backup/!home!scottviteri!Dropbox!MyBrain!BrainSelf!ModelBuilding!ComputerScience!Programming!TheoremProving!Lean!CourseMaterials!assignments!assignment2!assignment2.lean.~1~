/-
Replace the sorries by proofs. Do as many as you can.

(Use the methods descibed in Chapter 2. Soon we will discuss another style of proof
using "tactics," but for now, you should write proofs as expressions.)
-/
open classical
variables p q r s : Prop

/-
Note: the line "open classical" above means that you can use the shorter name for
"by_contradiction".
-/

example (h₁ : ¬p → q) (h₂ : ¬q) : p :=
by_contradiction
  (assume  h₃ : ¬p,
    have h₄ : q, from h₁ h₃,
    show false, from h₂ h₄)

-- You can also use the law of the excluded middle.

example : p ∨ ¬p := em p

-- We did not discuss the ↔ connective in class, but you can read
-- about it in TPIL.

/-
These are standard identities.
-/

example : (p → q) → (¬q → ¬p) := sorry

example : p ∨ (q ∧ r) → (p ∨ q) ∧ (p ∨ r) := sorry

example : ¬(p ∧ ¬p) := sorry

example : (p → (q → r)) → (p ∧ q → r) := sorry

example : p ∧ ¬q → ¬(p → q) := sorry

example : (¬p ∨ q) → (p → q) := sorry

example : (p ∨ q → r) → (p → r) ∧ (q → r) := sorry


/-
These require classical logic, which makes them tricky. You can use 
`by_contradiction` or `em`. 
-/

example : (p → q) → (¬p ∨ q) := sorry

example : (¬q → ¬p) → (p → q) := sorry


/-
This one is tricky! Give it a shot.
-/

example : ¬(p ↔ ¬p) := sorry


/-
These are only required of grad students. (But anyone is welcome to try!)
The last two require classical logic. It helps to use the law of the excluded
middle. If you *really* want a challenge, use only proof by contradiction.
-/

example : ¬(p ∨ q) → ¬p ∧ ¬q := sorry

example : ((p → q) → p) → p := sorry

example : (p → r ∨ s) → ((p → r) ∨ (p → s)) := sorry


/- 
For an added (optional!) challenge, try proving `em` using `by_contradiction` 
(and the other rules discussed in Chapter 2, which are intuitionistically valid), 
and vice-versa.
-/
