Add LoadPath "~/LocalSoftware/CoqASTSource/plugin/src/".
Add LoadPath "./".
Require Import PrintAST.ASTPlugin.


Fixpoint fact (n: nat) : nat :=
  match n with
  | 0 => 1
  | S n' => n * (fact n')
  end.

Compute (fact 4).

Parameters A B C : Set.
Definition curry (f : A * B -> C) := fun a => fun b => f (a, b).
Definition uncurry (g : A -> B -> C) := fun p => g (fst p) (snd p).

Theorem forward : forall f a b, uncurry (curry f) (a,b) = f (a,b).
Proof.
  intros.
  unfold curry, uncurry.
  simpl.
  reflexivity.
Qed.

Definition app (a : A) (b : B) (f : A * B -> C) := uncurry (curry f) (a,b).

PrintAST app.

PrintAST curry.
PrintAST uncurry.

Fixpoint dec (n : nat) :=
  match n with
  | 0 => 0
  | S n' => n'
  end.


Definition inc_dec (n : nat) := S (dec n).

Theorem same : forall (n : nat), inc_dec n = n.
Proof.
  intros. unfold inc_dec.
  induction n.
  {
   simpl.
Abort.

Definition dec_inc (n : nat) := dec (S n).

Theorem same' : forall (n : nat), dec_inc n = n.
Proof.
  intros. unfold dec_inc.
  induction n.
  {
   simpl. reflexivity.
  }
  {
    simpl. reflexivity.
  }
Qed.

PrintAST dec_inc.

PrintAST same'.

Theorem basic_eq : forall (n : nat), n = n.
Proof. reflexivity. Qed.

PrintAST basic_eq.


Theorem basic_eq' : forall (n : nat), n = n.
Proof.
  induction n; reflexivity.
Qed.

PrintAST basic_eq'.
Print eq.
Print eq_refl.
Check @eq_refl.
Check @eq.

PrintAST 3.
PrintAST fact.

Set PrintAST Indexing.

PrintAST 3.
PrintAST basic_eq.
PrintAST fact.


PrintAST basic_eq'.
