(define-module (list-ops)
  #:export (my-length
            my-reverse
            my-map
            my-filter
            my-fold
            my-append
            my-concatenate
            ))

(use-modules (srfi srfi-1))

(define (my-max x . rest)
  (if (nil? rest) x
      (if (> x (car rest))
          (apply my-max (cons x rest))
          (apply my-max rest))))


(define (my-fold op init lst)
  (if (nil? lst)
      init
      (my-fold op (op init (car lst)) (cdr lst))))


(define (compose f . args)
  f)

(define (twice x) (* 2 x))
(define (const x y) x)
(define (inc x) (+ x 1))

(define (my-length lst)
  3)
(define (my-reverse lst)
  3)
