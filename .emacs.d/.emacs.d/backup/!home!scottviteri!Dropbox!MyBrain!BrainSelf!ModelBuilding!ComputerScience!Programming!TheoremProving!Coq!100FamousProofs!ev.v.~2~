(*
Inductive nat : Set :=
| z : nat
| S : nat -> nat.

Inductive ev : nat -> Prop :=
| ev_0 : ev z
| ev_SS : forall n : nat, ev n -> ev (S (S n)).

Theorem ev_2 : ev (S (S z)).
Proof. apply (ev_SS z ev_0). Qed.
Print ev_2.

Theorem ev_4 : ev (S (S (S (S z)))).
Proof. apply (ev_SS (S (S z)) ev_2). Qed.
Print ev_4.

Theorem ev_6 : ev (S (S (S (S (S (S z)))))).
Proof. apply (ev_SS (S (S (S (S z)))) ev_4). Qed.
 *)

Inductive ev : nat -> Prop :=
| ev_0 : ev 0
| ev_SS : forall n : nat, ev n -> ev (S (S n)).

Theorem ev_2 : ev 2.
Proof. apply (ev_SS 0 ev_0). Qed.
Print ev_2.

Theorem ev_4 : ev 4.
Proof. apply (ev_SS 2 ev_2). Qed.
Print ev_4.

Theorem ev_8 : ev 8.
Proof. apply (ev_SS 6 (ev_SS 4 ev_4)). Qed.
Print ev_8.



Add LoadPath "~/LocalSoftware/CoqASTSource/plugin/src/".
Require Import PrintAST.ASTPlugin.


(* Print ev_4. *)

Print ev_2.
Print ev_4.

(*
PrintAST ev_2.
PrintAST ev_2 with depth 1.
PrintAST ev_2 with depth 2.
*)

PrintAST ev_4.
PrintAST ev_4 with depth 1.
PrintAST ev_4 with depth 2.


PrintAST ev_8.
PrintAST ev_8 with depth 1.
PrintAST ev_8 with depth 2.
PrintAST ev_8 with depth 3.




(*
Theorem forward_huge : (forall A B C : Prop, A -> (A->B) -> (A->B->C) -> C).
Proof.
  intros A B C.
  intros proof_of_A A_implies_B A_imp_B_imp_C.
  pose (proof_of_B := A_implies_B proof_of_A).
  pose (proof_of_C := A_imp_B_imp_C proof_of_A proof_of_B).
  exact proof_of_C.
Qed.

*)
