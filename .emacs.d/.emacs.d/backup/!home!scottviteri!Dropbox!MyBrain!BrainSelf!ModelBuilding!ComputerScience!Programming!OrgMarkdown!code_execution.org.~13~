#+TITLE: Example Document

Session mode -- all run in same interpreter session
This means can use variables from preview session block

Session Mode:
blank lines not OK in indented blocks, and don't use return()
Source block is passed directly to interactive python;
value is value of _ at end.

#+begin_src python :session
def foo(x):
  if x>0:
    return x+1
  else:
    return x-1

foo(1)
#+end_src

#+RESULTS:
: 2

Non session mode:
Blank lines OK in indented blocks, and use return

#+begin_src python
  def foo2(x):
    if x>0: return x+1

    else: return x-1

  return foo2(4)
#+end_src

#+RESULTS:
: 5

Has (:results file) <-- used for image output
#+begin_src python :session :results file
  import matplotlib
  matplotlib.use('Agg')
  import matplotlib.pyplot as plt
  fig = plt.figure(figsize=(3,2))
  plt.plot([1,3,2])
  fig.tight_layout()
  plt.savefig('images/myfig.png')
  'images/myfig.png'
#+end_src

#+RESULTS:
:RESULTS:
[[file:images/myfig.png]]
:RESULTS:

#+NAME: hello
#+BEGIN_SRC python :session :results output
  print("Hello, World")
#+END_SRC

#+RESULTS: hello
: Hello, World

Two plus two equals src_python{return(2+2)} {{{results(=4=)}}}

#+tblname: data_table
| a | 1 |
| b | 2 |
| c | 3 |
#+begin_src python :var val=1 :var data=data_table
# Return row specified by val
# In non-session mode, use return to return results
return(data[val])
#+end_src

#+RESULTS:
| b | 2 |

#+begin_src python :results file
  import matplotlib, numpy
  matplotlib.use('Agg')
  import matplotlib.pyplot as plt
  fig=plt.figure(figsize=(4,2))
  x=numpy.linspace(-15,15)
  plt.plot(numpy.sin(x)/x)
  fig.tight_layout()
  plt.savefig('images/python-matplot-fig.png')
  return 'images/python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:images/python-matplot-fig.png]]


Python can take unicode

#+NAME: unicode_str
#+BEGIN_EXAMPLE
  "α β"
#+END_EXAMPLE

#+NAME: error-in-passing-var
#+BEGIN_SRC python :var data=unicode_str
return data
#+END_SRC

#+RESULTS: error-in-passing-var
: α β
