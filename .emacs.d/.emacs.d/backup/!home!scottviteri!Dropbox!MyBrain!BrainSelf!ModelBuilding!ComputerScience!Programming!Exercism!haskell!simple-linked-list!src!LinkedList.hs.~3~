{-# LANGUAGE GADTs #-}
{-# LANGUAGE FlexibleInstances #-}

module LinkedList
    ( LinkedList
    , datum
    , fromList
    , isNil
    , new
    , next
    , nil
    , reverseLinkedList
    , toList
    ) where


-- nat = 0 | S nat
-- list a = a | cons a (list a)
-- data LinkedList a = LinkedNil | LinkedCons a (LinkedList a) deriving (Eq, Show)

class Inhabited (List a) where
  d :: [a] -> a

data LinkedList a where
  LinkedNil :: LinkedList a
  LinkedCons :: a -> LinkedList a -> LinkedList a

datum :: LinkedList a -> a
datum linkedList = case linkedList of
    LinkedNil -> []
    LinkedCons h t -> h


fromList :: [a] -> LinkedList a
fromList xs  = case xs of
   [] -> LinkedNil
   (h : t) -> LinkedCons h (fromList t)

isNil :: LinkedList a -> Bool
isNil linkedList = case linkedList of
    LinkedNil -> True
    LinkedCons _ _ -> False

new :: a -> LinkedList a -> LinkedList a
new x linkedList = LinkedCons x linkedList

next :: LinkedList a -> LinkedList a
next linkedList = case linkedList of
  LinkedNil -> LinkedNil
  LinkedCons h t -> t

nil :: LinkedList a
nil = LinkedNil

reverseLinkedList :: LinkedList a -> LinkedList a
reverseLinkedList linkedList = error "You need to implement this function."

toList :: LinkedList a -> [a]
toList linkedList = error "You need to implement this function."
λ> λ> λ> 