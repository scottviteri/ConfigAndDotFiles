module School (School, add, empty, grade, sorted) where

import Data.List
import Control.Monad

type School = [(Int,[String])]

add :: Int -> String -> School -> School
add gradeNum student school = case find ((== gradeNum) . fst) school of
  Nothing -> (gradeNum, [student]):school
  Just (_, classmates) ->
                if student `elem` classmates
                then school
                else (gradeNum, student:classmates):
                        (school \\ [(gradeNum,classmates)])

empty :: School
empty = []

grade :: Int -> School -> [String]
grade gradeNum school = case find ((== gradeNum) . fst) school of
                          Nothing -> []
                          Just (_,students) -> sort students

sorted :: School -> [(Int, [String])]
sorted = sort . map (liftM2 (,) fst (sort . snd))
