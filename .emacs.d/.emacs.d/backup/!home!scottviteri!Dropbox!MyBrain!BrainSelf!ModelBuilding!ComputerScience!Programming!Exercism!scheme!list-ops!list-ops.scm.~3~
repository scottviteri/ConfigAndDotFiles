(define-module (list-ops)
  #:export (my-length
            my-reverse
            my-map
            my-filter
            my-fold
            my-append
            my-concatenate
            ))


(use-modules (srfi srfi-1))

(define (max' x . rest)
  (if (nil? rest)
      x
      (if (> x (car rest))
          (apply max' (cons x (cdr rest)))
          (apply max' rest))))

(define (fold op init lst)
  (if (nil? lst)
      init
      (fold op (op init (car lst)) (cdr lst))))

([([([])])])

(define (compose' f . args)
  (if (nil? args) f (f (apply compose' args))))


(define (twice x (* 2 x)))
(define (const x y) x)
(define (inc x) (+ x 1))
(define (my-length lst)
  ())



(define (my-reverse lst)
  ())
